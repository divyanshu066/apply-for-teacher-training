{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "localBranchName": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The name of the local branch for the code in use."
            }
        },
        "commonResourceTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "decsription": "A object containing the common tags that should be applied to all Azure resources."
            }
        },
        "subscriptionPrefix": {
            "type": "string",
            "metadata": {
                "description": "The CIP subscription prefix, e.g. s106."
            }
        },
        "resourceEnvironmentName": {
            "type": "string",
            "metadata": {
                "description": "The environment of the resource."
            }
        },
        "serviceName": {
            "type": "string",
            "metadata": {
                "description": "The abbreviation of the service name to be used when naming a resource."
            }
        },
        "environment": {
            "type": "string",
            "metadata": {
                "description": "The hosting environment (qa, production, sandbox, etc)"
            }
        },
        "containerImageReference": {
            "type": "string",
            "metadata": {
                "description": "The container image to pull from the server. Should be in image:tag format."
            }
        },
        "railsEnv": {
            "type": "string",
            "defaultValue": "production",
            "metadata": {
                "description": "Environment for the rails app."
            }
        },
        "appServicePlanTier": {
            "type": "string",
            "metadata": {
                "description": "The App Service Plan tier."
            }
        },
        "appServicePlanSize": {
            "type": "string",
            "metadata": {
                "description": "The App Service Plan instance size."
            }
        },
        "appServicePlanInstances": {
            "type": "int",
            "metadata": {
                "description": "The number of instance of the web app Docker image to run in parallel."
            }
        },
        "redisCacheSKU": {
            "type": "string",
            "metadata": {
                "description": "Redis Cache service tier."
            },
            "allowedValues": [
              "Basic",
              "Standard",
              "Premium"
            ]
        },
        "redisCacheFamily": {
            "type": "string",
            "metadata": {
                "description": "Redis Cache family, C for basic/standard and P for premium."
            },
            "allowedValues": [
              "C",
              "P"
            ]
        },
        "redisCacheCapacity": {
            "type": "int",
            "metadata": {
                "description": "Redis Cache capacity, the larger the number the more performant the cache. For premium this value can only be from 1-5."
            },
            "minValue": 0,
            "maxValue": 6
        },
        "ciClockCpus": {
            "type": "string",
            "metadata": {
                "description": "The number of CPU cores allocated to the Clock service container instance."
            }
        },
        "ciClockMemory": {
            "type": "string",
            "metadata": {
                "description": "The amount of memory (in GB) allocated to the Clock service container instance."
            }
        },
        "ciWorkerCpus": {
            "type": "string",
            "metadata": {
                "description": "The number of CPU cores allocated to the Worker service container instance."
            }
        },
        "ciWorkerMemory": {
            "type": "string",
            "metadata": {
                "description": "The amount of memory (in GB) allocated to the Worker service container instance."
            }
        },
        "databaseName": {
            "type": "string",
            "metadata": {
                "description": "The name of the postgres database"
            }
        },
        "databaseUsername": {
            "type": "string",
            "metadata": {
                "description": "The username used to connect to the database."
            }
        },
        "databasePassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password used to connect to the database."
            }
        },
        "databaseStorageAutoGrow": {
            "type": "string",
            "metadata": {
                "description": "Used to enable or disable autogrow on the database storage."
            }
        },
        "databaseBackupRetentionDays": {
            "type": "int",
            "metadata": {
                "description": "Used to configure the number of days the database backups will be retained for."
            }
        },
        "databaseReplicaExists": {
            "type": "string",
            "metadata": {
                "description": "Does the database read replica already exists?"
            }
        },
        "securityAlertEmail": {
            "type": "string",
            "metadata": {
                "description": "Email address for psql security alerts"
            }
        },
        "secretKeyBase": {
            "type": "string",
            "metadata": {
                "description": "Secret key base for rails"
            }
        },
        "containerStartTimeLimit": {
            "type": "string",
            "metadata": {
                "description": "Time limit in seconds, up to 1800s, that the appService will wait for the container to start."
            }
        },
        "warmupPingPath": {
            "type": "string",
            "metadata": {
                "description": "The path to ping during webapp warmup process, prior to slot swap."
            }
        },
        "warmupPingStatus": {
            "type": "string",
            "metadata": {
                "description": "The permitted status codes to indicate a successful app warmup."
            }
        },
        "googleMapsAPIKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Google Maps API key, used for geocoding addresses"
            }
        },
        "govukNotifyAPIKey": {
            "type": "string",
            "metadata": {
                "description": "GOV.UK Notify service API key."
            }
        },
        "basicAuthUsername": {
            "type": "string",
            "metadata": {
                "description": "Basic Auth Username for the entire site except API routes"
            }
        },
        "basicAuthPassword": {
            "type": "string",
            "metadata": {
                "description": "Basic Auth Password for the entire site except API routes"
            }
        },
        "authorisedHosts": {
            "type": "string",
            "metadata": {
                "description": "Comma seperated list of FQDNs authorised to access the app."
            }
        },
        "customDomains":{
            "type": "array",
            "metadata": {
                "decsription": "JSON array holding the custom domain name and certificate thumbprint; [{domainName: certificateThumbprint:}]"
            },
            "defaultValue": []
        },
        "railsServeStaticFiles": {
            "type": "string",
            "defaultValue": "true",
            "metadata": {
                "description": "Serve static files."
            }
        },
        "sentryDSN": {
            "type": "string",
            "metadata": {
                "description": "Sentry client key."
            }
        },
        "logstashEnable": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to log to STDOUT in logstash format."
            }
        },
        "logstashRemote": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to ship logstash logs to remote server. Requires LOGSTASH_ENABLED == 'true'."
            }
        },
        "logstashHost": {
            "type": "string",
            "metadata": {
                "description": "Logstash/Logit Host to send logs to."
            }
        },
        "logstashPort": {
            "type": "string",
            "metadata": {
                "description": "Logstash/Logit Port to send logs to."
            }
        },
        "logstashSsl": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to use SSL when shipping logs."
            }
        },
        "logitApikey":{
            "defaultValue": "",
            "type": "string"
        },
        "skylightAuthToken":{
            "defaultValue": "",
            "type": "string"
        },
        "skylightEnable":{
            "defaultValue": false,
            "type": "bool"
        },
        "findBaseUrl": {
            "type": "string",
            "metadata": {
                "description": "The base URL to manage-courses-backend, Find's backend."
            }
        },
        "redisCacheName": {
            "type": "string",
            "metadata": {
                "description": "Redis URL prefix name."
            }
        },
        "containerInstanceNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "The name prefix for the background worker container instances."
            }
        },
        "dfeSignInClientId": {
            "type": "string",
            "metadata": {
                "description": "The DfE Sign-in client ID, obtained from the DfE Sign in management interface"
            }
        },
        "dfeSignInSecret": {
            "type": "string",
            "metadata": {
                "description": "The DfE Sign-in secret, obtained from the DfE sign-in management interface"
            }
        },
        "dfeSignInIssuer": {
            "type": "string",
            "metadata": {
                "description": "The URL of the DfE Sign-in OIDC interface (differs for test, pre-prod and prod)"
            }
        },
        "dsiApiUrl": {
            "type": "string",
            "metadata": {
                "description": "The DfE Sign-in API baseurl for this environment"
            }
        },
        "dsiApiSecret": {
            "type": "string",
            "metadata": {
                "description": "The DfE Sign-in API_SECRET for authenticating API requests"
            }
        },
        "ucasUsername": {
            "type": "string",
            "metadata": {
                "description": "The username for UCAS data exchange"
            }
        },
        "ucasPassword": {
            "type": "string",
            "metadata": {
                "description": "The password for UCAS data exchange"
            }
        },
        "ucasZipPassword": {
            "type": "string",
            "metadata": {
                "description": "The password for the zipfiles we exchange with UCAS"
            }
        },
        "ucasUploadBaseurl": {
            "type": "string",
            "metadata": {
                "description": "The upload baseurl for UCAS data exchange"
            }
        },
        "ucasUploadFolder": {
            "type": "string",
            "metadata": {
                "description": "The upload folder for UCAS data exchange"
            }
        },
        "ucasDownloadZipPassword": {
            "type": "string",
            "metadata": {
                "description": "The password to the zipfile that UCAS sends us"
            }
        },
        "stateChangeSlackUrl": {
            "type": "string",
            "metadata": {
                "description": "Set this to a Slack incoming webhook url for application state change notifications"
            }
        },
        "customAvailabilityMonitors": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of paths to perform monitoring on. In form TEST_NAME:HOST where HOST is the complete URL minus the http(s):// prefix."
            }
        },
        "alertRecipientEmails": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of recipients to receive availability email alerts. In form NAME:EMAIL_ADDRESS."
            }
        },
        "alertSlackChannel": {
            "type": "string",
            "metadata": {
                "description": "Slack channel to post alerts into."
            }
        },
        "logRetentionDays": {
            "type": "int",
            "metadata": {
                "description": "Number of days to retain logs in storage account."
            }
        },
        "govukNotifyCallbackAPIKey": {
          "type": "string",
          "metadata": {
              "description": "GOV.UK Notify service callback API key."
          }
        },
        "sandbox": {
            "type": "string",
            "metadata": {
                "description": "Set this to 'true' to switch on Sandox-specific business logic"
            }
        },
        "dockerRegistryUrl": {
            "type": "string",
            "defaultValue": "https://index.docker.io",
            "metadata": {
                "description": "URL of the docker registry, eg: https://index.docker.io"
            }
        },
        "dockerRegistryUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Username to login to the docker registry"
            }
        },
        "dockerRegistryPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password to login to the docker registry"
            }
        },
        "teacherTrainingApiBaseUrl": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "URL for the public Teacher training API"
            }
        },
        "googleAnalyticsApply": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Google analytics code for Apply"
            }
        },
        "googleAnalyticsManage": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Google analytics code for Manage"
            }
        }
    },
    "variables": {
        "deploymentUrlBase": "https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/bat-platform-building-blocks/templates/",
        "deploymentUrlBaseLocal": "[concat('https://raw.githubusercontent.com/DFE-Digital/apply-for-teacher-training/', parameters('localBranchName'),'/azure/')]",
        "resourceNamePrefix": "[toLower(concat(parameters('subscriptionPrefix'), parameters('resourceEnvironmentName'),'-', parameters('serviceName')))]",
        "appServiceName": "[concat(variables('resourceNamePrefix'), '-as')]",
        "appServicePlanName": "[concat(variables('resourceNamePrefix'), '-asp')]",
        "storageAccountName": "[replace(concat(variables('resourceNamePrefix'), 'str'), '-', '')]",
        "databaseServerName": "[concat(variables('resourceNamePrefix'), '-psql')]",
        "replicaServerName": "[concat(variables('databaseServerName'), '-replica')]",
        "replicaServerConnectionString": "[concat('postgres://', variables('replicaServerName'), '.postgres.database.azure.com:5432/', parameters('databaseName'), '?user=', parameters('databaseUsername'), '@', variables('replicaServerName'), '&password=', parameters('databasePassword'))]",
        "useCustomDomains": "[greater(length(parameters('customDomains')), 0)]",
        "databaseReplicaExists": "[bool(parameters('databaseReplicaExists'))]",
        "rubyAuthHosts": "[parameters('authorisedHosts')]",
        "defaultAvailabilityCheckHosts": "[if(variables('useCustomDomains'), createArray(concat('azcheck:', variables('appServiceName'), '.azurewebsites.net/check'), concat('check:', parameters('customDomains')[0].domainName, '/check')), createArray(concat('azcheck:', variables('appServiceName'), '.azurewebsites.net/check')))]",
        "availabilityCheckHosts": "[if(greater(length(parameters('customAvailabilityMonitors')), 0), concat(variables('defaultAvailabilityCheckHosts'), parameters('customAvailabilityMonitors')), variables('defaultAvailabilityCheckHosts'))]",
        "dbStorageMB": "[if(equals('production', parameters('environment')), 15360 , 5120)]",
        "copy": [
            {
                "name": "availabilityTests",
                "count": "[length(variables('availabilityCheckHosts'))]",
                "input": {
                    "nameSuffix": "[split(variables('availabilityCheckHosts')[copyIndex('availabilityTests')], ':')[0]]",
                    "url": "[concat('https://', split(variables('availabilityCheckHosts')[copyIndex('availabilityTests')], ':')[1])]",
                    "guid": "[guid(variables('availabilityCheckHosts')[copyIndex('availabilityTests')])]"
                }
            },
            {
                "name": "alertRecipientEmails",
                "count": "[if(greater(length(parameters('alertRecipientEmails')), 0), length(parameters('alertRecipientEmails')), 1)]",
                "input": {
                    "displayName": "[if(greater(length(parameters('alertRecipientEmails')), 0), split(parameters('alertRecipientEmails')[copyIndex('alertRecipientEmails')], ':')[0], 'UNUSED')]",
                    "emailAddress": "[if(greater(length(parameters('alertRecipientEmails')), 0), split(parameters('alertRecipientEmails')[copyIndex('alertRecipientEmails')], ':')[1], 'UNUSED')]"
                }
            }
        ]
    },
    "resources": [
        {
            "name": "storage-account",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'storage-account.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                }
            }
        },
	{
            "name": "redis-cache",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'redis.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "redisCacheName": {
                        "value": "[parameters('redisCacheName')]"
                    },
                    "redisCacheSKU": {
                        "value": "[parameters('redisCacheSKU')]"
                    },
                    "redisCacheFamily": {
                        "value": "[parameters('redisCacheFamily')]"
                    },
                    "redisCacheCapacity": {
                        "value": "[parameters('redisCacheCapacity')]"
                    },
                    "minimumTlsVersion": {
                        "value": "1.2"
                    },
                    "dataPersistence": {
                        "value": "aof"
                    },
                    "storageConnectionString": {
                        "value": "[reference('storage-account').outputs.storageConnectionString.value]"
                    }
                }
            },
            "dependsOn": [
                "storage-account"
            ]
        },
        {
            "name": "app-service-plan",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'app-service-plan.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "appServicePlanTier": {
                        "value": "[parameters('appServicePlanTier')]"
                    },
                    "appServicePlanSize": {
                        "value": "[parameters('appServicePlanSize')]"
                    },
                    "appServicePlanInstances": {
                        "value": "[parameters('appServicePlanInstances')]"
                    }
                }
            }
        },
        {
            "name": "app-service-and-containers",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBaseLocal'), 'containers.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "commonResourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "deploymentUrlBase": {
                        "value": "[variables('deploymentUrlBase')]"
                    },
                    "containerImageReference": {
                        "value": "[parameters('containerImageReference')]"
                    },
                    "ciClockCpus": {
                        "value": "[parameters('ciWorkerCpus')]"
                    },
                    "ciClockMemory": {
                        "value": "[parameters('ciWorkerMemory')]"
                    },
                    "ciWorkerCpus": {
                        "value": "[parameters('ciClockCpus')]"
                    },
                    "ciWorkerMemory": {
                        "value": "[parameters('ciClockMemory')]"
                    },
                    "authorisedHosts": {
                        "value": "[variables('rubyAuthHosts')]"
                    },
                    "customDomains": {
                        "value": "[if(variables('useCustomDomains'), parameters('customDomains'),'')]"
                    },
                    "containerInstanceNamePrefix": {
                        "value": "[parameters('containerInstanceNamePrefix')]"
                    },
                    "appServiceName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "dockerRegistryUrl": {
                        "value": "[parameters('dockerRegistryUrl')]"
                    },
                    "dockerRegistryUsername": {
                        "value": "[parameters('dockerRegistryUsername')]"
                    },
                    "dockerRegistryPassword": {
                        "value": "[parameters('dockerRegistryPassword')]"
                    },
                    "appEnvironmentVariables": {
                        "value": [
                            {
                                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                                "value": "[reference('app-insights').outputs.instrumentationKey.value]"
                            },
                            {
                                "name": "RAILS_ENV",
                                "value": "[parameters('railsEnv')]"
                            },
                            {
                                "name": "DB_HOSTNAME",
                                "value": "[reference('postgresql-server').outputs.fullyQualifiedDomainName.value]"
                            },
                            {
                                "name": "DB_USERNAME",
                                "value": "[concat(parameters('databaseUsername'), '@', variables('databaseServerName'))]"
                            },
                            {
                                "name": "DB_PASSWORD",
                                "secureValue": "[parameters('databasePassword')]"
                            },
                            {
                                "name": "DB_DATABASE",
                                "value": "[parameters('databaseName')]"
                            },
                            { 
                                "name": "BLAZER_DATABASE_URL",
                                "value": "[variables('replicaServerConnectionString')]"
                            },
                            {
                                "name": "SECRET_KEY_BASE",
                                "secureValue": "[parameters('secretKeyBase')]"
                            },
                            {
                                "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                                "value": "[parameters('containerStartTimeLimit')]"
                            },
                            {
                                "name": "WEBSITE_SWAP_WARMUP_PING_PATH",
                                "value": "[parameters('warmupPingPath')]"
                            },
                            {
                                "name": "WEBSITE_SWAP_WARMUP_PING_STATUSES",
                                "value": "[parameters('warmupPingStatus')]"
                            },
                            {
                                "name": "WEBSITE_SLOT_POLL_WORKER_FOR_CHANGE_NOTIFICATION",
                                "value": "0"
                            },
                            {
                                "name": "WEBSITE_HEALTHCHECK_MAXPINGFAILURES",
                                "value": "5" //At 1 ping per minute
                            },
                            {
                                "name": "RAILS_SERVE_STATIC_FILES",
                                "value": "[parameters('railsServeStaticFiles')]"
                            },
                            {
                                "name": "GOOGLE_MAPS_API_KEY",
                                "secureValue": "[parameters('googleMapsAPIKey')]"
                            },
                            {
                                "name": "GOVUK_NOTIFY_API_KEY",
                                "secureValue": "[parameters('govukNotifyAPIKey')]"
                            },
                            {
                                "name": "BASIC_AUTH_USERNAME",
                                "value": "[parameters('basicAuthUsername')]"
                            },
                            {
                                "name": "BASIC_AUTH_PASSWORD",
                                "value": "[parameters('basicAuthPassword')]"
                            },
                            {
                                "name": "AUTHORISED_HOSTS",
                                "value": "[variables('rubyAuthHosts')]"
                            },
                            {
                                "name": "CUSTOM_HOSTNAME",
                                "value": "[if(variables('useCustomDomains'), parameters('customDomains')[0].domainName, split(parameters('authorisedHosts'), ',')[0])]"
                            },
                            {
                                "name": "SENTRY_DSN",
                                "value": "[parameters('sentryDSN')]"
                            },
                            {
                                "name": "HOSTING_ENVIRONMENT_NAME",
                                "value": "[parameters('environment')]"
                            },
                            {
                                "name": "LOGSTASH_ENABLE",
                                "value": "[parameters('logstashEnable')]"
                            },
                            {
                                "name": "LOGSTASH_REMOTE",
                                "value": "[parameters('logstashRemote')]"
                            },
                            {
                                "name": "LOGSTASH_HOST",
                                "value": "[parameters('logstashHost')]"
                            },
                            {
                                "name": "LOGSTASH_PORT",
                                "value": "[parameters('logstashPort')]"
                            },
                            {
                                "name": "LOGSTASH_SSL",
                                "value": "[parameters('logstashSsl')]"
                            },
                            {
                                "name": "SKYLIGHT_AUTH_TOKEN",
                                "value": "[parameters('skylightAuthToken')]"
                            },
                            {
                                "name": "SKYLIGHT_ENABLE",
                                "value": "[parameters('skylightEnable')]"
                            },
                            {
                                "name": "SKYLIGHT_ENV",
                                "value": "[parameters('environment')]"
                            },
                            {
                                "name": "FIND_BASE_URL",
                                "value": "[parameters('findBaseUrl')]"
                            },
                            {
                                "name": "STATE_CHANGE_SLACK_URL",
                                "value": "[parameters('stateChangeSlackUrl')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_CLIENT_ID",
                                "value": "[parameters('dfeSignInClientId')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_SECRET",
                                "value": "[parameters('dfeSignInSecret')]"
                            },
                            {
                                "name": "DFE_SIGN_IN_ISSUER",
                                "value": "[parameters('dfeSignInIssuer')]"
                            },
                            {
                                "name": "DSI_API_URL",
                                "value": "[parameters('dsiApiUrl')]"
                            },
                            {
                                "name": "DSI_API_SECRET",
                                "value": "[parameters('dsiApiSecret')]"
                            },
                            {
                                "name": "UCAS_USERNAME",
                                "value": "[parameters('ucasUsername')]"
                            },
                            {
                                "name": "UCAS_PASSWORD",
                                "value": "[parameters('ucasPassword')]"
                            },
                            {
                                "name": "UCAS_UPLOAD_BASEURL",
                                "value": "[parameters('ucasUploadBaseurl')]"
                            },
                            {
                                "name": "UCAS_UPLOAD_FOLDER",
                                "value": "[parameters('ucasUploadFolder')]"
                            },
                            {
                                "name": "UCAS_DOWNLOAD_ZIP_PASSWORD",
                                "value": "[parameters('ucasDownloadZipPassword')]"
                            },
                            {
                                "name": "UCAS_ZIP_PASSWORD",
                                "value": "[parameters('ucasZipPassword')]"
                            },
                            {
                                "name": "REDIS_URL",
                                "secureValue": "[concat('rediss://:', listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2018-03-01').primaryKey, '@', parameters('redisCacheName'), '.redis.cache.windows.net:6380')]"
                            },
                            {
                                "name": "GOVUK_NOTIFY_CALLBACK_API_KEY",
                                "secureValue": "[parameters('govukNotifyCallbackAPIKey')]"
                            },
                            {
                                "name": "SANDBOX",
                                "value": "[parameters('sandbox')]"
                            },
                            {
                                "name": "TEACHER_TRAINING_API_BASE_URL",
                                "value": "[parameters('teacherTrainingApiBaseUrl')]"
                            },
                            {
                                "name": "GOOGLE_ANALYTICS_APPLY",
                                "value": "[parameters('googleAnalyticsApply')]"
                            },
                            {
                                "name": "GOOGLE_ANALYTICS_MANAGE",
                                "value": "[parameters('googleAnalyticsManage')]"
                            }
                        ]
                    }
                }
            },
            "dependsOn": [
                "app-service-plan",
                "redis-cache",
                "postgresql-database"
            ]
        },
        {
            "name": "app-service-logs",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'app-service-logs.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "appServiceName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "httpLoggingEnabled": {
                        "value": true
                    },
                    "detailedErrorLoggingEnabled": {
                        "value": true
                    },
                    "applicationLogsFileSystem": {
                        "value": "Verbose"
                    }
                }
            },
            "dependsOn": [
                "app-service-and-containers"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "app-insights",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'application-insights.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "appInsightsName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "attachedService": {
                        "value": "[variables('appServiceName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "logic-app-slack",
            "condition": "[greater(length(parameters('alertRecipientEmails')), 0)]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'logic-app-slack.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceNamePrefix": {
                        "value": "[variables('resourceNamePrefix')]"
                    },
                    "environment": {
                        "value": "[parameters('environment')]"
                    },
                    "slackChannel": {
                        "value": "[parameters('alertSlackChannel')]"
                    },
                    "serviceName": {
                        "value": "[parameters('serviceName')]"
                    },
                    "enableDiagnostics": {
                        "value": "logs"
                    },
                    "logRetentiondays": {
                        "value": "[parameters('logRetentionDays')]"
                    },
                    "storageAccountResourceId": {
                        "value": "[reference('storage-account', '2018-02-01').outputs.storageAccountResourceId.value]"
                    },
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    }
                }
            },
            "dependsOn" : [
                "storage-account"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "action-groups",
            "condition": "[greater(length(parameters('alertRecipientEmails')), 0)]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'action-group.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "appInsightsName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "alertRecipientEmails": {
                        "value": "[variables('alertRecipientEmails')]"
                    },
                    "logicAppReceivers": {
                        "value": [
                            {
                                "name": "Slack",
                                "resourceId": "[reference('logic-app-slack', '2017-05-10').outputs.logicAppResourceId.value]",
                                "callbackUrl": "[reference('logic-app-slack', '2017-05-10').outputs.WebHookURI.value]",
                                "useCommonAlertSchema": false
                            }
                        ]
                    }
                }
            },
            "dependsOn": [
                "logic-app-slack"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "availability-tests",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'availability-tests.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "appInsightsName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "availabilityTests": {
                        "value": "[variables('availabilityTests')]"
                    }
                }
            },
            "dependsOn": [
                "app-insights"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[if(greater(length(parameters('customAvailabilityMonitors')), 0), concat('availability-test-alerts-', split(parameters('customAvailabilityMonitors')[copyIndex('customAlerts')], ':')[0]), 'UNUSED_TEST_ALERTS')]",
            "condition": "[and(greater(length(parameters('customAvailabilityMonitors')), 0), greater(length(parameters('alertRecipientEmails')), 0))]",
            "type": "Microsoft.Resources/deployments",
            "copy": {
                "name": "customAlerts",
                "count": "[if(greater(length(parameters('customAvailabilityMonitors')), 0), length(parameters('customAvailabilityMonitors')), 1)]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'availability-test-alert.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "appInsightsName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "appInsightsId": {
                        "value": "[reference('app-insights').outputs.AppInsightsResourceId.value]"
                    },
                    "alertName": {
                        "value": "[concat(variables('appServiceName'), '-at-alert-', split(parameters('customAvailabilityMonitors')[copyIndex('customAlerts')], ':')[0])]"
                    },
                    "actionGroupId": {
                        "value": "[if(greater(length(parameters('alertRecipientEmails')), 0), reference('action-groups', '2019-03-01').outputs.actionGroupResourceId.value, '')]"
                    },
                    "alertDescriptionText": {
                        "value": "[concat('Custom URL availability monitor alert for \"', split(parameters('customAvailabilityMonitors')[copyIndex('customAlerts')], ':')[0], '\"')]"
                    },
                    "alertSeverity": {
                        "value": 1
                    },
                    "webTestId": {
                        "value": "[resourceId('microsoft.insights/webtests', concat(variables('appServiceName'), '-at-', split(parameters('customAvailabilityMonitors')[copyIndex('customAlerts')], ':')[0]))]"
                    }
                }
            },
            "dependsOn": [
                "availability-tests",
                "action-groups"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-server",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "postgresServerName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "postgresAdminLogin": {
                        "value": "[parameters('databaseUsername')]"
                    },
                    "postgresAdminPassword": {
                        "value": "[parameters('databasePassword')]"
                    },
                    "securityAlertEmailAddress": {
                        "value": "[parameters('securityAlertEmail')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    },
                    "storageAutoGrow": {
                        "value": "[parameters('databaseStorageAutoGrow')]"
                    },
                    "dbStorageMB": {
                        "value": "[variables('dbStorageMB')]"
                    },
                    "backupRetentionDays": {
                        "value": "[parameters('databaseBackupRetentionDays')]"
                    }
                }
            },
            "dependsOn": [
                "storage-account"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-database",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-database.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "serverName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "databaseName": {
                        "value": "[parameters('databaseName')]"
                    }
                }
            },
            "dependsOn": [
                "postgresql-server"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-server-firewall-rules",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server-firewall-rules.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "firewallRuleNamePrefix": {
                        "value": "AZURE_IP-"
                    },
                    "ipAddresses": {
                        "value": "[reference('app-service-and-containers').outputs.appServiceIpAddresses.value]"
                    },
                    "serverName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "allowAzureServicesAccess": {
                        "value": true
                    }
                }
            },
            "dependsOn": [
                "postgresql-server",
                "postgresql-server-read-replica"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-server-configurations",
            "type": "Microsoft.Resources/deployments",
            "condition": "[not(variables('databaseReplicaExists'))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server-configuration.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "serverName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "configurations": {
                        "value": [{
                            "name": "azure.replication_support",
                            "value": "REPLICA",
                            "source": "user-override"
                        }]
                    }
                }
            },
            "dependsOn": [
                "postgresql-server"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-server-read-replica",
            "type": "Microsoft.Resources/deployments",
            "condition": "[not(variables('databaseReplicaExists'))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "postgresServerName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "isReadReplica": {
                        "value": true
                    },
                    "readReplicaExists": {
                        "value": "[variables('databaseReplicaExists')]"
                    },
                    "storageAutoGrow": {
                        "value": "[parameters('databaseStorageAutoGrow')]"
                    },
                    "backupRetentionDays": {
                        "value": "[parameters('databaseBackupRetentionDays')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    },
                    "dbStorageMB": {
                        "value": "[variables('dbStorageMB')]"
                    }
                }
            },
            "dependsOn": [
                "postgresql-server",
                "postgresql-server-configurations",
                "postgresql-database"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "postgresql-replica-server-firewall-rules",
            "type": "Microsoft.Resources/deployments",
            "condition": "[not(variables('databaseReplicaExists'))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server-firewall-rules.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "serverName": {
                        "value": "[concat(variables('databaseServerName'), '-replica')]"
                    },
                    "allowAzureServicesAccess": {
                        "value": true
                    },
                    "firewallRuleNamePrefix": {
                        "value": "AZURE_IP-"
                    },
                    "ipAddresses": {
                        "value": "[reference('app-service-and-containers').outputs.appServiceIpAddresses.value]"
                    }
                }
            },
            "dependsOn": [
                "postgresql-server-read-replica"
            ]
        },
        {
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('databaseServerName'), '/Microsoft.Authorization/DbProtection')]",
            "type": "Microsoft.DBforPostgreSQL/servers/providers/locks",
            "properties": {
                "level": "CanNotDelete",
                "notes": "Prevents accidental deletion of the Postgres database and its backups."
            },
            "dependsOn": [
                "postgresql-database",
                "postgresql-server-firewall-rules"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "infrastructure-dashboard",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'dashboard.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "resourceGroupName": {
                        "value": "[variables('resourceNamePrefix')]"
                    },
                    "serviceName": {
                        "value": "[parameters('serviceName')]"
                    },
                    "environment": {
                        "value": "[parameters('environment')]"
                    },
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "appServiceName": {
                        "value": "[variables('appServiceName')]"
                    },
                    "databaseServerName": {
                        "value": "[variables('databaseServerName')]"
                    },
                    "redisCacheName": {
                        "value": "[parameters('redisCacheName')]"
                    },
                    "containerInstances": {
                        "value": [
                            "[concat(parameters('containerInstanceNamePrefix'), '-clk')]",
                            "[concat(parameters('containerInstanceNamePrefix'), '-wkr')]"
                        ]
                    }
                }
            },
            "dependsOn": [
                "redis-cache",
                "app-insights",
                "postgresql-server",
		"app-service-and-containers"
            ]
        },
        {
            "apiVersion": "2017-05-10",
            "name": "event-hubs-logit-logic-app",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'event-hubs-logic-app.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceTags": {
                        "value": "[parameters('commonResourceTags')]"
                    },
                    "eventhub_name":{
                        "value": "logstash"
                    },
                    "logit_apikey":{
                        "value": "[parameters('logitApikey')]"
                    },
                    "postgresServerName":{
                        "value": "[variables('databaseServerName')]"
                    }
                }
            },
            "dependsOn": ["postgresql-server"]
        }
    ],
    "outputs": {
        "AppServiceName": {
            "type": "string",
            "value": "[variables('appServiceName')]"
        }
    }
}
