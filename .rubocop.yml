inherit_from: .rubocop_todo.yml

inherit_gem:
  rubocop-govuk:
    - config/default.yml
    - config/rails.yml

require:
- rubocop-rspec
- ./lib/rubocop/cop/govuk/govuk_button_to.rb
- ./lib/rubocop/cop/govuk/govuk_link_to.rb

AllCops:
  Exclude:
    - 'bin/*'
    - 'db/schema.rb'
    - 'node_modules/**/*'
    - 'config/application.rb'
    - 'config/puma.rb'
    - 'config/environments/*'
    - 'config/initializers/nationalities.rb'
    - 'features/support/env.rb'
    - 'vendor/**/*'

Rails/BulkChangeTable:
  Enabled: false

Style/AndOr:
  EnforcedStyle: conditionals

Style/StringLiterals:
  Enabled: true
  EnforcedStyle: single_quotes

Bundler/OrderedGems:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

RSpec/NestedGroups:
  Enabled: true
  Max: 4

RSpec/ExampleLength:
  Enabled: false

RSpec/MultipleExpectations:
  Enabled: false

RSpec/ContextWording:
  Enabled: false

# we have a property called "subject" in some factories
RSpec/EmptyLineAfterSubject:
  Exclude:
    - 'spec/factories.rb'

RSpec/LetSetup:
  Enabled: false

Naming/MethodParameterName:
  AllowedNames:
    - e
    - to

Capybara/FeatureMethods:
  EnabledMethods:
    - feature
    - scenario

# It's better to be explicit about the class that's being tested
RSpec/DescribedClass:
  Enabled: false

# This cop wants us to use `expect().to change(Candidate, :count)` instead
# of `expect().to change { Candidate.count }`, which does not seem better.
RSpec/ExpectChange:
  Enabled: false

RSpec/LeadingSubject:
  Enabled: false

# In acceptance tests it's often handy to user instance variables to keep track of state
RSpec/InstanceVariable:
  Enabled: false

RSpec/PredicateMatcher:
  Enabled: false

RSpec/DescribeClass:
  Enabled: false

Lint/AmbiguousBlockAssociation:
  Exclude:
    - 'spec/support/slack_notifications.rb'
    - 'spec/system/support_interface/daily_report_spec.rb'
    - 'spec/requests/vendor_api/api_authentication_spec.rb'

# We do not want to subclass from ApplicationController. This enables separation
# between the namespaces, and allows subclassing from ActionController::API in
# the Vendor API.
Rails/ApplicationController:
  Enabled: false

# We do not use ApplicationRecord
Rails/ApplicationRecord:
  Enabled: false

# Rails does not actually allow "dynamic find_by", so this cop yields false positives
# like `VendorApiToken.find_by_unhashed_token` (which we implement ourselves)
Rails/DynamicFindBy:
  Enabled: false

# Not all rake tasks need :environment
Rails/RakeEnvironment:
  Enabled: false

# This cop demands a default value for not-null columns, which is not possible
# when dealing with references
Rails/NotNullColumn:
  Enabled: false

Naming/MemoizedInstanceVariableName:
  Enabled: false

# sometimes reduce is fine
Style/EachWithObject:
  Enabled: false

Govuk:
  Include:
    - 'app/views/**/*'

# Pending cops
# These will be enabled by default at Rubocop 1.0
Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

Rake/Desc:
  Exclude:
    - 'lib/tasks/reset_qa.rake'

# This cop has too many false positives (it also requires underscores for things that are not numbers)
Style/NumericLiterals:
  Enabled: false

# Sometimes it's easier to think about a negated if, for example `render_error if !model.valid?` vs `render_error unless model.valid?`
Style/NegatedIf:
  Enabled: false

# Disable these cops because they do not allow reasonable code like splitting
# `attr_reader :bla, :foo` over 2 lines.
Layout/MultilineArrayLineBreaks:
  Enabled: false

Layout/MultilineHashKeyLineBreaks:
  Enabled: false

Layout/MultilineMethodArgumentLineBreaks:
  Enabled: false

Layout/FirstMethodArgumentLineBreak:
  Enabled: false

# ü§∑‚Äç‚ôÇÔ∏è
Style/AsciiComments:
  Enabled: false

Style/ConditionalAssignment:
  Enabled: false

Rails/Output:
  Exclude:
    - config/initializers/console.rb
